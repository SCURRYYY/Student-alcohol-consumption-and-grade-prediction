filter(diamonds, volume==100)
filter(diamonds, volume<50)
filter(diamonds, volume>50)
summary(diamonds$volume)
quantile(diamonds$volume , c(0.95))
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))
p4
rm(p4)
rm(p3)
rm(p1)
rm(p5)
rm(p7)
rm(p8)
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))
p3=ggplot(aes(x = price , y =volume ), data = na.omit(diamonds)) +
geom_point()
p4
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))
p4
cor(diamonds$volume, diamonds$price)
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95)))) +
geom_jitter(alpha = 1/100)
p4
p3=ggplot(aes(x = price , y =volume ), data = na.omit(diamonds)) +
geom_point(alpha = 1/100)
#having a closer look o to 95% percentile(ie95% diamonds have less than this value)
# of volume i.e
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))
p4
p5=p3 + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.25))))
p5
count(diamonds$volume == 0 )
filter((diamonds$volume == 0 ))
filter(diamonds,volume == 0 )
filter(diamonds,volume >3000  )
filter(diamonds,volume==900  )
filter(diamonds,volume > 800 & volume < 900 )
with(filter(diamonds , (!volume==0 & volume>=800) ),cor(diamonds$volume, diamonds$price))
with(filter(diamonds , !(volume==0 & volume>=800) ),cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume != 0 & volume >=800) ,cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume == 0 & volume >=800) ,cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume >=800) ,cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume!=0) ,cor(diamonds$volume, diamonds$price))
diam_vol<-subset(diamonds , volume!=0 & volume>=800)
View(diam_vol)
diam_vol<-subset(diamonds , volume!=0 & volume<=800)
with(diam_vol ,cor(diamonds$volume, diamonds$price))
with(diam_vol ,cor(volume,price))
with(filter(diamonds , volume!=0 , volume<=800) ,cor(volume,price))
with(filter(diamonds , volume!=0 & volume<=800) ,cor(volume,price))
p3=ggplot(aes(x = price , y =volume ), data = filter(diamonds , volume!=0 & volume<=800)) +
geom_point(alpha = 1/100)
p3
p3=ggplot(aes(x = price , y =volume ), data = filter(diamonds , volume!=0 & volume<=800)) +
geom_point(alpha = 1/100) +
geom_smooth()
p3
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))  +geom_smooth()
p4
diamondsByClarity<- diamonds %>% group_by(clarity) %>%
summarise(mean_price = mean(price) , median_price = median(price), min_price=min(price), max_price=max(price),n = n())
View(diamondsByClarity)
by(diamonds$price/diamonds$carat , diamonds$clarity,sum)
diamondsByColor<- diamonds %>% group_by(color) %>%
summary(mean_price = mean(price), median_price=median(price) , min_price=min(price),max_price=max(price) , sum_price=sum(price), count=n())
View(diamondsByClarity)
diamondsByColor
diamondsByColor<- diamonds %>% group_by(color) %>%
summarise(mean_price = mean(price), median_price=median(price) , min_price=min(price),max_price=max(price) , sum_price=sum(price), count=n())
View(diamondsByColor)
14949281/2808
ggplot(aes(x=clarity,y=mean_price) data=na.omit(diamondsByClarity))  +
geom_bar()
ggplot(aes(x=clarity,y=mean_price), data=na.omit(diamondsByClarity))  +
geom_bar()
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar()
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar() +
scale_y_continuous(limits(500,14000))
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar() +
scale_y_continuous(limits=c(500,14000))
barplot(diamondsByClarity$clarity)
barplot(diamondsByClarity$clarity,las=1)
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_col()
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar(stat='count')
ggplot(aes(x=color), data=na.omit(diamondsByColor))  +
geom_bar(stat='count')
library(gridExtra)
p1=ggplot(aes(x=color), data=na.omit(diamondsByColor))  +
geom_bar(stat='count')
p2=ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar(stat='count')
grid.arrange(p1,p2,ncol=1)
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col()
p1
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col(binwidth=10)
p1
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col(binwidth=5)
p2=ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_col()
p2
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col()
p2=ggplot(aes(x=clarity,y=mean_price), data=na.omit(diamondsByClarity))  +
geom_col()
grid.arrange(p1,p2,ncol=1)
diamondsByColor<- diamonds %>% group_by(color) %>%
summarise(mean_price = mean(price), median_price=median(price) , min_price=min(price),max_price=max(price) , sum_price=sum(price), count=n())
diamondsByClarity<- diamonds %>% group_by(clarity) %>%
summarise(mean_price = mean(price) , median_price = median(price), min_price=min(price), max_price=max(price),sum_price=sum(price),n = n())
View(diamondsByClarity)
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_bar()
p1
fb
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
library(ggplot2)
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
diamonds<-mutate(diamonds, ratio_ppc = price/carat)
library(dplyr)
diamonds<-mutate(diamonds, ratio_ppc = price/carat)
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_line(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point() +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity)
install.packages('memisc')
#for Scatterplot  matrices - and r
library(GGally)#scatterplot matrices
library(memisc)#to summarise the regression
library(scales)#for writing things
library(MASS)
library(car)
diamonds_samp<- diamonds[sample(nrow(diamonds),10000) , ]
View(diamonds_samp)
ggpairs(diamonds_samp)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 10,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 10 , color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(GGally)#scatterplot matrices
library(memisc)#to summarise the regression
library(scales)#for writing things
library(MASS)
library(car)
library(ggplot2)
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = .01) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = .01 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 100) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = .01 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .10,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#binwidth is basically width or interval of 1 bin (group)
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .01,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 1000,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
p1
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#binwidth is basically width or interval/size  of 1 bin-bucket (group)
#lesser binwidth more accurate counts
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .01,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , nrow=2)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#binwidth is basically width or interval/size  of 1 bin-bucket (group)
#lesser binwidth more accurate counts
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .01,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=2)
library(ggplot2)
data('diamonds')
library(GGally)#scatterplot matrices
library(memisc)#to summarise the regression
library(scales)#for writing things
library(MASS)
library(car)
source('~/RStudio/explored datasets/daimonds.R', echo=TRUE)
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point(alpha= 1/4) +
geom_smooth(method = 'glm',color='red')+
scale_color_brewer(type = 'div')
cube_root<- function() trans_new('cuberoot',
transform = function(x) x^(1/3) ,
inverse = function(x) x^3)
?trans_new
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point() +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point() +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point() +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')  +
geom_smooth(method = 'glm',color='red')
head(table(diamonds$carat))
head(sort(table(diamonds$carat),decreasing = T))
head(sort(table(diamonds$carat),decreasing = F))
head(sort(table(diamonds$price),decreasing = F))
head(sort(table(diamonds$price),decreasing = T))
head(sort(count(diamonds$price),decreasing = T))
library(tidyr)
head(sort(count(diamonds$price),decreasing = T))
head(sort(count(diamonds$price),decreasing = T))
?count
library(dplyr)
head(sort(count(diamonds$price),decreasing = T))
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000))
ggplot(aes(x = carat ,  y = price), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000))
ggplot(aes(x = carat ,  y = price), data =na.omit(diamonds)) +
geom_point(alpha=1/5 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000))
library(RColorBrewer)
ggplot(aes(x = carat ,  y = price,color=clarity), data =na.omit(diamonds)) +
geom_point(alpha=1/5 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div',guide = guide_legend(title = 'Clarity'), reverse=T)
ggplot(aes(x = carat ,  y = price,color=clarity), data =na.omit(diamonds)) +
geom_point(alpha=1/5 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div',guide = guide_legend(title = 'Clarity', reverse=T))
ggplot(aes(x = carat ,  y = price,color=clarity), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 2 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div',guide = guide_legend(title = 'Clarity', reverse=T))
summary(diamonds$clarity)
getwd(0)
getwd()
setwd('F:/PROJECTS/EDA-PROJECT/student-mat.csv')
setwd('F:/PROJECTS/EDA-PROJECT')
stu<-read.csv('student-mat.csv')
library(ggplot2)
library(dplyr)
library(tidyr)
str(stu)
table(stu$higher,stu$sex)
#Test for checking independence of attributes-correlation b/2 categorical variables-one tailed only
chisq.test(stu$higher,stu$sex)
table(stu$studytime,stu$sex)
table(stu$studytime,stu$higher,stu$sex)
ggplot(aes(x = studytime), data =stu) +
geom_bar(aes(fill=sex)) +
facet_wrap(~ higher)
table(stu$address)
prop.table(stu$address)
prop.table(table(stu$address))
table(stu$address,stu$studytime)
table(stu$address,stu$studytime,stu$sex)
ggplot(aes(x = studytime), data =stu) +
geom_histogram(aes(color=gender), binwidth=0.1) +
facet_warp( ~ address)
ggplot(aes(x = studytime), data =stu) +
geom_histogram(aes(color=gender), binwidth=0.1) +
facet_wrap( ~ address)
ggplot(aes(x = studytime), data =stu) +
geom_histogram(aes(color=sex), binwidth=0.1) +
facet_wrap( ~ address)
ggplot(aes(x = studytime), data =stu) +
geom_histogram(aes(fill=sex), binwidth=0.1) +
facet_wrap( ~ address)
ggplot(aes(x = studytime), data =stu) +
geom_histogram(aes(fill=sex), binwidth=0.1) +
facet_wrap(higher ~ address)
table(stu$address,stu$higher)
chisq.test(stu$address,stu$higher)
prop.table(table(stu$address,stu$higher))
prop.table(table(stu$address,stu$higher))*100
6/88
82/88
prop.table(table(stu$address=='R',stu$higher))*100
14/307
293/307
table(stu$Fedu)
table(stu$Fedu,stu$sex)
prop.table(table(stu$Fedu,stu$sex))
48/88
prop.table(table(stu$Fedu,stu$studytime))
table(stu$Fedu,stu$studytime)
chisq.test(stu$Fedu,stu$studytime)
table(stu$Medu,stu$studytime)
table(stu$Medu)
chisq.test(stu$Fedu,stu$Dalc)
chisq.test(stu$Fedu,stu$Walc)
table(stu$Fedu,stu$Walc)
table(stu$Fedu)
table(stu$Fedu)
table(stu$Medu)
prop.table(table(stu$Fedu))
prop.table(table(stu$Medu))
table(stu$schoolsup)
table(stu$famsup)
table(stu$famsup,stu$s)
table(stu$famsup,stu$sex)
chisq.test(stu$studytime,stu$famsup)
table(stu$famsup,stu$studytime)
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex)) +
facet_Wrap( ~ famsup)
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex)) +
facet_wrap( ~ famsup)
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex),binwidth=1) +
facet_wrap( ~ famsup)
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex),binwidth=.1) +
facet_wrap( ~ famsup)
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex),binwidth=.1) +
facet_wrap( ~ famsup) +
scale_y_continuous(limits = c(0,150) , breaks = seq(0,150,20
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex),binwidth=.1) +
facet_wrap( ~ famsup) +
scale_y_continuous(limits = c(0,150) , breaks = seq(0,150,20))
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex),binwidth=.1) +
facet_wrap( ~ famsup) +
scale_y_continuous(limits = c(0,150) , breaks = seq(0,150,20))
source('F:/PROJECTS/EDA-PROJECT/student.R', echo=TRUE)
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex),binwidth=.1) +
facet_wrap( ~ famsup) +
scale_y_continuous(limits = c(0,150) , breaks = seq(0,150,20)) +
coord_trans(y ='sqrt')
table(stu$famsup,stu$studytime)
table(stu$famsup,stu$studytime,stu$sex)
ggplot(aes(x = studytime),data =stu) +
geom_histogram(aes(fill=sex),binwidth=.1) +
facet_wrap( ~ famsup) +
scale_y_continuous(limits = c(0,150) , breaks = seq(0,150,20))
chisq.test(stu$higher,stu$famsup)
chisq.test(stu$failures,stu$famsup)
chisq.test(stu$activities,stu$famsup)
table(stu$activities,stu$famsup)
chisq.test(stu$famsup,stu$activities)
chisq.test(stu$internet,stu$famsup)
chisq.test(stu$internet,stu$studytime)
chisq.test(stu$internet,stu$famsup)
table(stu$famsup , stu$internet)
stu$famsup<-ifelse(stu$famsup=='yes','Family Supports Educationally','Does not Supports')
table(stu$famsup , stu$internet)
chisq.test(stu$goout,stu$famsup)
chisq.test(stu$Dalc,stu$famsup)
chisq.test(stu$Walc,stu$famsup)
table(stu$famrel)
prop.table(table(stu$famrel))
chisq.test(stu$famrel,stu$studytime)
chisq.test(stu$famrel,stu$famsup)
table(stu$famrel,stu$famsup)
ggplot(aes(x = famsup), data = stu) +
geom_bar(aes(fill=famsup))
ggplot(aes(x = famrel), data = stu) +
geom_bar(aes(fill=famsup))
ggplot(aes(x = Fjob),data = stu) +
geom_bar(aes(fill=famsup))
table(stu$famsup,stu$Fjob)
source('F:/PROJECTS/EDA-PROJECT/student.R', echo=TRUE)
ggplot(aes(x = Mjob),data = stu) +
geom_bar(aes(fill=famsup))
ggplot(aes(x = famrel), data = stu) +
geom_bar(aes(fill=famsup)) +
xlab('Family Relations(0-worst,5-Excellent')
ggplot(aes(x = famrel), data = stu) +
geom_bar(aes(fill=famsup)) +
xlab('Family Relations(0-worst,5-Excellent)')
ggplot(aes(x = famrel), data = stu) +
geom_bar(aes(fill=famsup)) +
xlab('Family Relations(1-worst,5-Excellent)')
